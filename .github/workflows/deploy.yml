name: Build & Deploy Calendo

on:
  push:
    branches:
      - prod

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  N8N_API_URL: ${{ secrets.N8N_API_URL }}
  N8N_API_KEY: ${{ secrets.N8N_API_KEY }}
  N8N_ENCRYPTION_KEY: ${{ secrets.N8N_ENCRYPTION_KEY }}
  N8N_HOST: ${{ secrets.N8N_HOST }}
  N8N_PROTOCOL: ${{ secrets.N8N_PROTOCOL }}

jobs:
  deploy:
    name: Build & Deploy to VPS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install dependencies & build frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Clean old project folder
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            rm -rf ~/Calendo

      - name: Copy project files to VPS
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "frontend/out,frontend/Dockerfile,frontend/docker-compose.yml,frontend/default.conf,backend/docker-compose.yml,backend/Dockerfile,backend/database"
          target: "~/Calendo"

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ~/Calendo
            # Deploy frontend
            cd frontend
            sudo docker compose down
            sudo docker compose build
            sudo docker compose up -d
            # Deploy backend
            cd ../backend
            sudo docker compose down
            sudo docker compose build
            sudo docker compose up -d
            # Cleanup
            sudo docker image prune -f

      - name: Send Telegram notification (Success)
        if: success()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          AUTHOR_NAME=$(git log -1 --pretty=format:"%an")
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="‚úÖ CI/CD Sukses!%0AProject *Calendo* berhasil dideploy ke VPS üéâ%0A%0Aüìù *Commit:* \`$COMMIT_MESSAGE\`%0Aüë§ *Author:* $AUTHOR_NAME%0Aüîó [Lihat Commit]($COMMIT_URL)" \
            -d parse_mode=Markdown

      - name: Send failure Telegram notification
        if: failure()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          AUTHOR_NAME=$(git log -1 --pretty=format:"%an")
          COMMIT_URL="https://github.com/${{ github.repository }}/commit/${{ github.sha }}"
          
          curl -s -X POST https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage \
            -d chat_id="$TELEGRAM_CHAT_ID" \
            -d text="‚ùå CI/CD Gagal!%0AProject *Calendo* gagal dideploy ke VPS ‚ö†Ô∏è%0A%0Aüìù *Commit:* \`$COMMIT_MESSAGE\`%0Aüë§ *Author:* $AUTHOR_NAME%0Aüîó [Lihat Commit]($COMMIT_URL)" \
            -d parse_mode=Markdown